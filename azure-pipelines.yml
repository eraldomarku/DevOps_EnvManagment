variables:
###################################################################################################################################################
# This variables should not be touched because after the import of db in VmB we will have two databases with those names as setted
- name: db_d365fo_name
  value: "AxDB"

- name: db_backup_d365fo_name
  value: "AxDB_original"
####################################################################################################################################################
# GLOBAL VARIABLES

# Path where db .bacpac will be extracted from VmA 
- name: extract_db_path
  value: "C:/Bacpacs/" 

# Path where db .bacpac will be  downloaded from VmB
- name: download_db_path
  value: "C:/downloadedBacpacs/"

# Name of the file with extension type that will be extracted, uploaded and downloaded
- name: db_name
  value: "db_dev_1.bacpac"

# Uri of Azure storage blob where the file will be uploaded and downlaoded 
- name: blob_url
  value: 'https://apsiaem01ada09a20ec1a713.blob.core.windows.net/retail-cdx-down-68719476736?sp=racwdli&st=2022-10-19T10:51:08Z&se=2023-02-02T19:51:08Z&spr=https&sv=2021-06-08&sr=c&sig=kiGgyozma%2FZWom%2BtWz%2F7ynf8rEoXCn3XP5DjigiS65Q%3D'

# Name of the new db that will be created on Vm_B to import the .bacpac
- name: sql_db_name
  value: "AxDB_updated"

# Name of agent-pool 
- name: pool
  value: "Nodepool"

# Name of agent installed on VmA
- name: agent_A
  value: "uat_simulation_agent"

# Name of agent installed on VmB
- name: agent_B
  value: "tier1_agent"

# Timeout after which the pipeline will be interrupted
- name: jobs_timeout
  value: 360
# ------------------------------------------------------------------------------------------------------------------------------------------
# SCIRPTS VARIABLES
# Script that sets environments 
- name: script_set_environments
  value: 'db_env_managment_scripts/set_environments.ps1'

# Script that exports db .bacpac from VmA db
- name: script_export_db
  value: 'db_env_managment_scripts/export_db.ps1'

# Script that uploads db .bacpac from VmA to Azure storage blob
- name: script_upload_db
  value: 'db_env_managment_scripts/upload_db.ps1'

# Script that downloads db .bacpac from Azure storage blob to VmB
- name: script_download_db
  value: 'db_env_managment_scripts/download_db.ps1'

# Script that imports db .bacpac into VmB db
- name: script_import_db
  value: 'db_env_managment_scripts/import_db.ps1'

# Script that start and stop d365fo environment
- name: script_start_stop_d365fo
  value: 'db_env_managment_scripts/start_stop_d365fo_env.ps1'

# Script that rename mdf and ldf as the name of the database
- name: script_rename_mdf_ldf
  value: 'db_env_managment_scripts/rename_mdf_ldf.ps1'
#################################################################################################################################################

stages:
# First stage checks if NuGet, df365.tools are installed and the needed packages as d365sqlpackage and d365AzCopy 
- stage: Set_environments
  jobs:
  - job: set_VmA
    timeoutInMinutes: ${{variables.jobs_timeout}}
    pool:
      name: ${{variables.pool}}
      demands:
        - agent.name -equals ${{variables.agent_A}}
    steps:
    - task: PowerShell@2
      inputs:
        filePath: ${{variables.script_set_environments}}
  - job: set_VmB
    timeoutInMinutes: ${{variables.jobs_timeout}}
    pool:
      name: ${{variables.pool}}
      demands:
        - agent.name -equals ${{variables.agent_B}} 
    steps:
    - task: PowerShell@2
      inputs:
        filePath: ${{variables.script_set_environments}}

# Second stage extract .bacpac db from VmA    
- stage: VmA_export_db
  jobs:
  - job: export_db
    timeoutInMinutes: ${{variables.jobs_timeout}}
    pool:
      name: ${{variables.pool}}
      demands:
        - agent.name -equals ${{variables.agent_A}}
    steps:
    - task: PowerShell@2
      inputs:
        arguments: '${{variables.extract_db_path}} ${{variables.db_name}}'
        filePath: ${{variables.script_export_db}}

# VmA upload bacpac to blob azure storage    
- stage: VmA_upload_db_to_Azure_blob
  jobs:
  - job: upload_db
    timeoutInMinutes: ${{variables.jobs_timeout}}
    pool:
      name: ${{variables.pool}}
      demands:
        - agent.name -equals ${{variables.agent_A}}
    steps:
    - task: PowerShell@2
      inputs:
        arguments: "${{variables.extract_db_path}} ${{variables.db_name}} '${{variables.blob_url}}'" #as blob is a url is passed with ' ' because contains special charcater &
        filePath: ${{variables.script_upload_db}}

# Fourth stage VmB download .bacpac db from azure storage blob
- stage: VmB_download_db_from_Azure_blob
  jobs:
  - job: download_db
    timeoutInMinutes: ${{variables.jobs_timeout}}
    pool:
      name: ${{variables.pool}}
      demands:
        - agent.name -equals ${{variables.agent_B}}
    steps:
    - task: PowerShell@2
      inputs:
        arguments: "${{variables.download_db_path}} ${{variables.db_name}} '${{variables.blob_url}}'"
        filePath: ${{variables.script_download_db}}


# Fifth VmB import downloaded bacpac from blob azure
- stage: VmB_import_db
  jobs:
  - job: import_db
    timeoutInMinutes: ${{variables.jobs_timeout}}
    pool:
      name: ${{variables.pool}}
      demands:
        - agent.name -equals ${{variables.agent_B}}
    steps:
    - task: PowerShell@2
      inputs:
        arguments: 'stop'
        filePath: ${{variables.script_start_stop_d365fo}}
    - task: PowerShell@2
      inputs:
        arguments: '${{variables.download_db_path}} ${{variables.db_name}} ${{variables.sql_db_name}} ${{variables.MSSQL_DATA_path}}'
        filePath: ${{variables.script_import_db}}

# Sixth stage renames mdf and ldf of created AxDB and AxDB_original as their names
- stage: VmB_rename_mdf_ldf
  jobs:
  - job: rename_mdf_ldf
    timeoutInMinutes: ${{variables.jobs_timeout}}
    pool:
      name: ${{variables.pool}}
      demands:
        - agent.name -equals ${{variables.agent_B}}
    steps:
    - task: PowerShell@2
      inputs:
        arguments: '${{variables.db_d365fo_name}}'
        filePath: 'db_env_managment_scripts/rename_mdf_ldf.ps1'
    - task: PowerShell@2
      inputs:
        arguments: '${{variables.db_backup_d365fo_name}}'
        filePath: 'db_env_managment_scripts/rename_mdf_ldf.ps1'
    - task: PowerShell@2
      inputs:
        arguments: 'start'
        filePath: '${{variables.script_start_stop_d365fo}}'
    


         


